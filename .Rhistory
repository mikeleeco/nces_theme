plot.margin=unit(rep(0.5, 4), "cm"),
axis.text.y=element_text(margin=margin(r=-5)),
plot.title=element_text(family="work", margin=margin(b=15)),
# plot.subtitle=element_text(family="work"),
plot.caption=element_text(size=8, hjust=0, margin=margin(t=15)),
# legend.text=element_text(family="work"),
legend.background=element_blank(),
legend.key=element_blank())
gg <- gg + theme1
gg_animate(gg, interval = .5, saver = "ex2_tween.gif", ani.width = 600, ani.height = 450, title_frame = FALSE)
gg_animate(gg, interval = .05, saver = "ex2_tween.gif", ani.width = 600, ani.height = 450, title_frame = FALSE)
gg_animate(gg, interval = .05, saver = "ex2_tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE)
gg_animate(gg, interval = .05, pause = 1, saver = "ex2_tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE)
?gg_animate
getwd()
gg_animate(gg, interval = .05, "line_tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE)
?gg_animate
?saveGIF
gg_animate(gg, interval = .5, pause = 1, saver = "ex2_tween.gif", ani.width = 1200, ani.height = 650,loop=FALSE, title_frame = FALSE)
ani.options(loop = FALSE)
gg_animate(gg, interval = 1, pause = 1, saver = "ex2_tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE)
?im.convert
gg_animate(gg, interval = 1, pause = 1, ani.width = 1200, ani.height = 650, title_frame = FALSE)
dev.off()
oopt = ani.options(loop=FALSE)
ani.options(oopt)
gg_animate(gg, interval = 1, pause = 1, saver = "ex2_tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE)
gg
gg_animate(gg, ani.width = 1200, ani.height = 650, title_frame = FALSE)
ani.options(loop = TRUE)
gg_animate(gg, interval = 1, saver = "ex2_tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE)
gg_animate(gg, interval = 1,"ex2_tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE)
gg_animate(gg, interval = .05,"ex2_tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE)
ani.options()
gg_animate(gg, interval = .05,"tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE, loop=FALSE)
ani.option()
install.packages('installr')
library(installr)
install.ImageMagick()
install.packages('installR')
system()
install.packages("installr")
install.packages("reshape")
install.packages("installr")
install.packages("magick");library(magick)
magick_config()
gg_animate(gg, interval = .05,"tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE, loop=FALSE)
?im.convert
gg_animate(gg, interval = .05,"tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE, loop=FALSE, convert = "gm convert")
gg_animate(gg, interval = .05,"tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE, loop=FALSE, convert = "convert")
library(ggplot2)
library(scales)
library(tidyr)
library(showtext)
library(dplyr)
library(lubridate)
library(tweenr)
library(gganimate)
library(animation)
owd = setwd(tempdir())
oopt = ani.options(interval = 0.05, nmax = 20)
png("bm%03d.png")
brownian.motion(pch = 21, cex = 5, col = "red", bg = "yellow",
main = "Demonstration of Brownian Motion")
dev.off()
## filenames with a wildcard *
im.convert("bm*.png", output = "bm-animation1.gif")
## use GraphicsMagick
gm.convert("bm*.png", output = "bm-animation2.gif")
## or a filename vector
bm.files = sprintf("bm%03d.png", 1:20)
im.convert(files = bm.files, output = "bm-animation3.gif")
ani.options(oopt)
setwd(owd)
owd = setwd(tempdir())
oopt = ani.options(interval = 0.05, nmax = 20, loop = FALSE)
png("bm%03d.png")
brownian.motion(pch = 21, cex = 5, col = "red", bg = "yellow",
main = "Demonstration of Brownian Motion")
dev.off()
ani.options(oopt)
setwd(owd)
getwd()
owd = setwd(tempdir())
oopt = ani.options(interval = 0.05, nmax = 20)
png("bm%03d.png")
brownian.motion(pch = 21, cex = 5, col = "red", bg = "yellow",
main = "Demonstration of Brownian Motion")
dev.off()
## filenames with a wildcard *
im.convert("bm*.png", output = "bm-animation1.gif")
ani.options(oopt)
setwd(owd)
owd = setwd(tempdir())
oopt = ani.options(interval = 0.05, nmax = 20, loop=FALSE)
png("bm%03d.png")
brownian.motion(pch = 21, cex = 5, col = "red", bg = "yellow",
main = "Demonstration of Brownian Motion")
dev.off()
## filenames with a wildcard *
im.convert("bm*.png", output = "bm-animation1.gif")
ani.options(oopt)
setwd(owd)
install.packages('animation', repos = 'http://yihui.name/xran')
install.packages('animation', repos = 'http://yihui.name/xran')
install.packages("animation", repos = "http://yihui.name/xran")
library(animation)
library(ggplot2)
library(scales)
library(tidyr)
library(showtext)
library(dplyr)
library(lubridate)
library(tweenr)
library(gganimate)
library(animation)
res <- read.csv("residential.csv",stringsAsFactors = FALSE)
colnames(res) <- c('Race', '1997', '1999','2001','2003','2006','2007','2010','2011','2013')
res <- res %>% gather(Race, key= "Year")
colnames(res)[3] <- "Value"
res$Race <- as.factor(unique(res$Race))
res$Year <- as.Date(res$Year,"%Y")
# res$Year <- as.POSIXct(res$Year, origin="1970-01-01")
gg <- ggplot(res, aes(x = Year, y = Value, group = Race, color=Race)) + geom_line() + scale_x_date(labels=year(unique(res$Year)), breaks=unique(res$Year))
states2<-factor(unique((res$Year)))
# function to create list of data sets from our data (by state)
myf<-function(mystate){as.data.frame(res[res$Year==as.Date(mystate),])}
# use lapply to generate the list of data sets:
my.list2<-lapply(states2,myf)
# Apply tweenr:
tf <- tween_states(my.list2, tweenlength= 3, statelength=2, ease="linear",nframes=200)
tf$Race <- as.factor(unique(tf$Race))
tf$Year <- as.Date(tf$Year,"%Y")
class(tf)
gg <- ggplot(tf, aes(x = Year, y = Value, frame = Year)) + geom_line(aes(group=Race, color=Race, cumulative = TRUE)) + scale_x_date(labels=year(unique(res$Year)), breaks=unique(res$Year))
gg <- gg + theme_minimal(base_family="work")
gg <- gg + labs(x=NULL, y=NULL, title = "Average scale scores for mathematics, grade 4 by all students [TOTAL],\nyear and jurisdiction: 2015", caption = "NOTE: The NAEP mathematics scale ranges from 0-500.")
theme1 <- theme(text=element_text(family="work"),
panel.background=element_blank(),
panel.grid.major.y=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.major.x=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
# axis.line=element_line(),
# axis.line.x=element_blank(),
# axis.text=element_text(family="work"),
axis.ticks=element_line(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
# axis.ticks.length=unit(5, "pt"),
plot.margin=unit(rep(0.5, 4), "cm"),
axis.text.y=element_text(margin=margin(r=-5)),
plot.title=element_text(family="work", margin=margin(b=15)),
# plot.subtitle=element_text(family="work"),
plot.caption=element_text(size=8, hjust=0, margin=margin(t=15)),
# legend.text=element_text(family="work"),
legend.background=element_blank(),
legend.key=element_blank())
gg <- gg + theme1
ani.options(loop = FALSE)
gg_animate(gg, interval = .05, pause = 1, "ex2_tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE)
gg <- ggplot(tf, aes(x = Year, y = Value, frame = Year)) + geom_line(aes(group=Race, color=Race, cumulative = TRUE)) + scale_x_date(labels=year(unique(res$Year)), breaks=unique(res$Year))
gg <- gg + theme_minimal(base_family="work")
gg <- gg + labs(x=NULL, y=NULL, title = "Average scale scores for mathematics, grade 4 by all students [TOTAL],\nyear and jurisdiction: 2015", caption = "NOTE: The NAEP mathematics scale ranges from 0-500.")
theme1 <- theme(text=element_text(family="work"),
panel.background=element_blank(),
panel.grid.major.y=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.major.x=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
# axis.line=element_line(),
# axis.line.x=element_blank(),
# axis.text=element_text(family="work"),
axis.ticks=element_line(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
# axis.ticks.length=unit(5, "pt"),
plot.margin=unit(rep(0.5, 4), "cm"),
axis.text.y=element_text(margin=margin(r=-5)),
plot.title=element_text(family="work", margin=margin(b=15)),
# plot.subtitle=element_text(family="work"),
plot.caption=element_text(size=8, hjust=0, margin=margin(t=15)),
# legend.text=element_text(family="work"),
legend.background=element_blank(),
legend.key=element_blank())
gg <- gg + theme1
ani.options(loop = TRUE
gg_animate(gg, interval = .05, pause = 1, "ex2_tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE)
gg <- ggplot(tf, aes(x = Year, y = Value, frame = Year)) + geom_line(aes(group=Race, color=Race, cumulative = TRUE)) + scale_x_date(labels=year(unique(res$Year)), breaks=unique(res$Year))
gg <- gg + theme_minimal(base_family="work")
gg <- gg + labs(x=NULL, y=NULL, title = "Average scale scores for mathematics, grade 4 by all students [TOTAL],\nyear and jurisdiction: 2015", caption = "NOTE: The NAEP mathematics scale ranges from 0-500.")
theme1 <- theme(text=element_text(family="work"),
panel.background=element_blank(),
panel.grid.major.y=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.major.x=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
# axis.line=element_line(),
# axis.line.x=element_blank(),
# axis.text=element_text(family="work"),
axis.ticks=element_line(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
# axis.ticks.length=unit(5, "pt"),
plot.margin=unit(rep(0.5, 4), "cm"),
axis.text.y=element_text(margin=margin(r=-5)),
plot.title=element_text(family="work", margin=margin(b=15)),
# plot.subtitle=element_text(family="work"),
plot.caption=element_text(size=8, hjust=0, margin=margin(t=15)),
# legend.text=element_text(family="work"),
legend.background=element_blank(),
legend.key=element_blank())
gg <- gg + theme1
ani.options(loop = TRUE)
gg_animate(gg, interval = .05, pause = 1, "ex2_tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE)
gg <- gg + theme_minimal(base_family="work")
gg <- gg + labs(x=NULL, y=NULL, title = "Average scale scores for mathematics, grade 4 by all students [TOTAL],\nyear and jurisdiction: 2015", caption = "NOTE: The NAEP mathematics scale ranges from 0-500.")
theme1 <- theme(text=element_text(family="work"),
panel.background=element_blank(),
panel.grid.major.y=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.major.x=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
# axis.line=element_line(),
# axis.line.x=element_blank(),
# axis.text=element_text(family="work"),
axis.ticks=element_line(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
# axis.ticks.length=unit(5, "pt"),
plot.margin=unit(rep(0.5, 4), "cm"),
axis.text.y=element_text(margin=margin(r=-5)),
plot.title=element_text(family="work", margin=margin(b=15)),
# plot.subtitle=element_text(family="work"),
plot.caption=element_text(size=8, hjust=0, margin=margin(t=15)),
# legend.text=element_text(family="work"),
legend.background=element_blank(),
legend.key=element_blank())
gg + theme1
gg <- ggplot(tf, aes(x = Year, y = Value, frame = Year)) + geom_line(aes(group=Race, color=Race, cumulative = TRUE)) + scale_x_date(labels=year(unique(res$Year)), breaks=unique(res$Year))
gg <- gg + theme_minimal(base_family="work")
gg <- gg + labs(x=NULL, y=NULL, title = "Average scale scores for mathematics, grade 4 by all students [TOTAL],\nyear and jurisdiction: 2015", caption = "NOTE: The NAEP mathematics scale ranges from 0-500.")
theme1 <- theme(text=element_text(family="work"),
panel.background=element_blank(),
panel.grid.major.y=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.major.x=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
# axis.line=element_line(),
# axis.line.x=element_blank(),
# axis.text=element_text(family="work"),
axis.ticks=element_line(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
# axis.ticks.length=unit(5, "pt"),
plot.margin=unit(rep(0.5, 4), "cm"),
axis.text.y=element_text(margin=margin(r=-5)),
plot.title=element_text(family="work", margin=margin(b=15)),
# plot.subtitle=element_text(family="work"),
plot.caption=element_text(size=8, hjust=0, margin=margin(t=15)),
# legend.text=element_text(family="work"),
legend.background=element_blank(),
legend.key=element_blank())
gg <- gg + theme1
ani.options(loop = TRUE)
gg_animate(gg, interval = .05, pause = 1, "ex2_tween.gif", ani.width = 1200, ani.height = 650, title_frame = FALSE)
?theme
gg <- gg + theme_minimal(base_family="work")
gg <- gg + labs(x="Year", y="Rate per 100,000 juveniles", title = "Residential placement rate (number of juvenile offenders in residential facilities) per 100,000\njuveniles, by race/ethnicity: Selected years, 1997 through 2013", caption = "NOTE: Residential placement rate calculated per 100,000 persons age 10 through the upper age at which offenders were under original jurisdiction of the juvenile courts in each state in the given year.")
theme1 <- theme(text=element_text(family="work"),
panel.background=element_blank(),
panel.grid.major.y=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.major.x=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
# axis.line=element_line(),
# axis.line.x=element_blank(),
# axis.text=element_text(family="work"),
axis.ticks=element_line(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
# axis.ticks.length=unit(5, "pt"),
plot.margin=unit(rep(0.5, 4), "cm"),
axis.text.y=element_text(margin=margin(r=-5)),
plot.title=element_text(family="work", margin=margin(b=15)),
# plot.subtitle=element_text(family="work"),
plot.caption=element_text(size=8, hjust=0, margin=margin(t=15)),
# legend.text=element_text(family="work"),
legend.background=element_blank(),
legend.key=element_blank(),
legend.position= "bottom")
gg + theme1
gg
gg <- gg + labs(x="Year", y="Rate per 100,000 juveniles", title = "Residential placement rate (number of juvenile offenders in residential facilities) per 100,000\njuveniles, by race/ethnicity: Selected years, 1997 through 2013", caption = "NOTE: Residential placement rate calculated\nper 100,000 persons age 10 through the upper age at which offenders were under original jurisdiction of the juvenile courts in each state in the given year.")
theme1 <- theme(text=element_text(family="work"),
panel.background=element_blank(),
panel.grid.major.y=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.major.x=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
# axis.line=element_line(),
# axis.line.x=element_blank(),
# axis.text=element_text(family="work"),
axis.ticks=element_line(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
# axis.ticks.length=unit(5, "pt"),
plot.margin=unit(rep(0.5, 4), "cm"),
axis.text.y=element_text(margin=margin(r=-5)),
plot.title=element_text(family="work", margin=margin(b=15)),
# plot.subtitle=element_text(family="work"),
plot.caption=element_text(size=8, hjust=0, margin=margin(t=15)),
# legend.text=element_text(family="work"),
legend.background=element_blank(),
legend.key=element_blank(),
legend.position= "bottom")
gg + theme1
gg <- gg + labs(x="Year", y="Rate per 100,000 juveniles", title = "Residential placement rate (number of juvenile offenders in residential facilities) per 100,000\njuveniles, by race/ethnicity: Selected years, 1997 through 2013", caption = "NOTE: Residential placement rate calculatedper 100,000 persons age 10 through the upper age at which offenders were under original\njurisdiction of the juvenile courts in each state in the given year.")
theme1 <- theme(text=element_text(family="work"),
panel.background=element_blank(),
panel.grid.major.y=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.major.x=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
# axis.line=element_line(),
# axis.line.x=element_blank(),
# axis.text=element_text(family="work"),
axis.ticks=element_line(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
# axis.ticks.length=unit(5, "pt"),
plot.margin=unit(rep(0.5, 4), "cm"),
axis.text.y=element_text(margin=margin(r=-5)),
plot.title=element_text(family="work", margin=margin(b=15)),
# plot.subtitle=element_text(family="work"),
plot.caption=element_text(size=8, hjust=0, margin=margin(t=15)),
# legend.text=element_text(family="work"),
legend.background=element_blank(),
legend.key=element_blank(),
legend.position= "bottom")
gg + theme1
states2<-factor(unique((res$Year)))
myf<-function(mystate){as.data.frame(res[res$Year==as.Date(mystate),])}
# use lapply to generate the list of data sets:
my.list2<-lapply(states2,myf)
# Apply tweenr:
tf <- tween_states(my.list2, tweenlength= 3, statelength=2, ease="linear",nframes=200)
2*3*45
View(res)
my.list2
2*3*25
sapply(my.list2,nrow)
rm(list = ls())
library(ggplot2)
library(scales)
library(tidyr)
library(showtext)
library(dplyr)
library(lubridate)
library(tweenr)
library(gganimate)
library(animation)
res <- read.csv("residential.csv",stringsAsFactors = FALSE)
colnames(res) <- c('Race', '1997', '1999','2001','2003','2006','2007','2010','2011','2013')
res <- res %>% gather(Race, key= "Year")
colnames(res)[3] <- "Value"
res$Race <- as.factor(unique(res$Race))
res$Year <- as.Date(res$Year,"%Y")
# res$Year <- as.POSIXct(res$Year, origin="1970-01-01")
gg <- ggplot(res, aes(x = Year, y = Value, group = Race, color=Race)) + geom_line() + scale_x_date(labels=year(unique(res$Year)), breaks=unique(res$Year))
gg <- gg + theme_minimal(base_family="work")
gg <- gg + labs(x="Year", y="Rate per 100,000 juveniles", title = "Residential placement rate (number of juvenile offenders in residential facilities) per 100,000\njuveniles, by race/ethnicity: Selected years, 1997 through 2013", caption = "NOTE: Residential placement rate calculatedper 100,000 persons age 10 through the upper age at which offenders were under original\njurisdiction of the juvenile courts in each state in the given year.")
theme1 <- theme(text=element_text(family="work"),
panel.background=element_blank(),
panel.grid.major.y=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.major.x=element_line(color="#2b2b2b", linetype="dotted", size=0.15),
panel.grid.minor.x=element_blank(),
panel.grid.minor.y=element_blank(),
# axis.line=element_line(),
# axis.line.x=element_blank(),
# axis.text=element_text(family="work"),
axis.ticks=element_line(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
# axis.ticks.length=unit(5, "pt"),
plot.margin=unit(rep(0.5, 4), "cm"),
axis.text.y=element_text(margin=margin(r=-5)),
plot.title=element_text(family="work", margin=margin(b=15)),
# plot.subtitle=element_text(family="work"),
plot.caption=element_text(size=8, hjust=0, margin=margin(t=15)),
# legend.text=element_text(family="work"),
legend.background=element_blank(),
legend.key=element_blank(),
legend.position= "bottom")
gg + theme1
res <- read.csv("children.csv")
res$Race <- factor(res$Race, levels = c("White, non-Hispanic", "Black, non-Hispanic", "Hispanic"), labels = c("White, NH","Black, NH", "Hispanic"))
res$Structure <- factor(res$Structure, levels = c("All children living with a parent", "Children with two married parents", "Children with a single mother","Children with a single father"), labels = c("All children living with a parent", "Children with two married parents", "Children with a single mother","Children with a single father"))
gg <- ggplot(res, aes(x = Structure, y = Percentage, fill = Race)) + geom_bar(stat="identity",position = position_dodge(width = 0.75), width=0.6)
gg+ theme1
res <- read.csv("expenditure.csv", stringsAsFactors = FALSE)
res$Change <- res$Change - 100
# res$Race <- factor(res$Race, levels = c("White, non-Hispanic", "Black, non-Hispanic", "Hispanic"), labels = c("White, NH","Black, NH", "Hispanic"))
# res$Structure <- factor(res$Structure, levels = c("All children living with a parent", "Children with two married parents", "Children with a single mother","Children with a single father"), labels = c("All children living with a parent", "Children with two married parents", "Children with a single mother","Children with a single father"))
gg <- ggplot(res, aes(x = Change, y = Expenditure)) + geom_point(shape = 23, color = "blue", size = 2) +
geom_smooth(method=lm, se=FALSE,linetype = "dashed", color = "black")
gg + theme_light()
gg + theme1
#add the "US" at the top and the bottomw of the list of states
states2<-factor(unique((res$Year)))
# function to create list of data sets from our data (by state)
myf<-function(mystate){as.data.frame(res[res$Year==as.Date(mystate),])}
# use lapply to generate the list of data sets:
my.list2<-lapply(states2,myf)
# Apply tweenr:
tf <- tween_states(my.list2, tweenlength= 3, statelength=2, ease="linear",nframes=150)
tf$Race <- as.factor(unique(tf$Race))
tf$Year <- as.Date(tf$Year,"%Y")
?tween_states
tf <- tween_states(my.list2, tweenlength= 3, statelength=2, ease="cubic-in-out",nframes=200)
tf <- tween_states(my.list2, tweenlength= 3, statelength=2, ease="cubic-in-out",nframes=500)
tf <- tween_states(my.list2, tweenlength= 2, statelength=3, ease=rep('cubic-in-out',17),nframes=50)
tf$Race <- as.factor(unique(tf$Race))
tf$Year <- as.Date(tf$Year,"%Y")
tf <- tween_states(my.list2, tweenlength= 2, statelength=3, ease=rep('cubic-in-out',5),nframes=50)
states2<-factor(unique((res$Year)))
# function to create list of data sets from our data (by state)
myf<-function(mystate){as.data.frame(res[res$Year==as.Date(mystate),])}
# use lapply to generate the list of data sets:
my.list2<-lapply(states2,myf)
states2<-factor(unique((res$Year)))
res <- read.csv("residential.csv",stringsAsFactors = FALSE)
#add the "US" at the top and the bottomw of the list of states
states2<-factor(unique((res$Year)))
# function to create list of data sets from our data (by state)
myf<-function(mystate){as.data.frame(res[res$Year==as.Date(mystate),])}
# use lapply to generate the list of data sets:
my.list2<-lapply(states2,myf)
# Apply tweenr:
tf <- tween_states(my.list2, tweenlength= 2, statelength=3, ease="linear",nframes=200)
tf$Race <- as.factor(unique(tf$Race))
tf$Year <- as.Date(tf$Year,"%Y")
states2<-factor(unique((res$Year)))
res <- read.csv("residential.csv",stringsAsFactors = FALSE)
res
res
getwd()
1/24
options$fig.num
knitr::opts_chunk$set
getwd()
setwd()
ffrb <- read.csv("ffrb.csv", stringsAsFactors = FALSE)
ff <- read.csv("/home/michael/Documents/flex.csv", stringsAsFactors = FALSE)
View(ff)
library(dplyr)
rb <- ff %>% filter(position=="RB")
View(rb)
rb <- ff %>% filter(position=="WR")
rb <- ff %>% filter(position=="RB")
rb <- ff %>% filter(position=="WR")
ff <- read.csv("/home/michael/Documents/FFA-CustomRankings.csv", stringsAsFactors = FALSE)
ff <- read.csv("/home/michael/Documents/FFA-CustomRankings.csv", stringsAsFactors = FALSE, row.names = FALSE)
?read.csv
ff <- read.csv("/home/michael/Documents/FFA-CustomRankings.csv", stringsAsFactors = FALSE, row.names = NULL)
View(ff)
ff <- read.csv("/home/michael/Documents/FFA-CustomRankings.csv")
ff <- read.csv("/home/michael/Documents/FFA-CustomRankings.csv", stringsAsFactors = FALSE, row.names = NULL)
View(ff)
colnames(ff) <- colnames(ff)[2:ncol(ff)]
View(ff)
rb <- ff %>% filter(position=="RB")
colnames(ff)
str(ff)
table(ff$position)
ff %> filter(position != "DB")
ff <- ff %>% filter(position != "DB")
library(dplyr)
ff <- ff %>% filter(position != "DB")
class(ff)
ff <- read.csv("/home/michael/Documents/FFA-CustomRankings.csv", row.names = NULL)
colnames(ff) <- colnames(ff)[2:ncol(ff)]
str(ff)
ff <- ff %>% filter(position != "DB")
ff[,24] <- NULL
ff <- ff %>% filter(position != "DB")
View(rb)
ff <- ff %>% filter(position != "DL")
ff <- ff %>% filter(position != "LB")
table(ff$position)
def <- ff %>% filter(position == "DST")
View(def)
rb <- ff %>% filter(position == "RB")
rb <- ff %>% filter(position == "WR")
rb <- ff %>% filter(position == "RB" | position == "WR")
rb <- ff %>% filter(position == "RB" | position == "WR" | position =="TE")
rb <- ff %>% filter(position == "QB")
ff <- read.csv("/home/michael/Documents/FFA-CustomRankings.csv", stringsAsFactors = FALSE, row.names = NULL)
colnames(ff) <- colnames(ff)[2:ncol(ff)]
ff[,24] <- NULL
library(dplyr)
wr <- ff %>% filter(position=="WR")
View(wr)
ff <- read.csv("/home/michael/Documents/FFA-CustomRankings.csv", stringsAsFactors = FALSE, row.names = NULL)
colnames(ff) <- colnames(ff)[2:ncol(ff)]
ff[,24] <- NULL
unique(ff$position)
ff2 <- ff %>% filter(position == "K")
library(dplyr)
unique(ff$position)
ff2 <- ff %>% filter(position == "K")
View(ff2)
